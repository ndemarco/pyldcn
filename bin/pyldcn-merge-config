#!/usr/bin/env python3
"""
pyldcn-merge-config - Merge Device List with Axis Configuration

Merges device_list.json (hardware discovery facts) with axis_config.json
(user-defined configuration) to create configured_devices.json (merged result).

This is part of the three-file configuration system:
1. device_list.json - Hardware facts from network discovery
2. axis_config.json - User-defined axis configuration (tuning, homing, limits)
3. configured_devices.json - Merged result ready for hardware application

Usage:
    pyldcn-merge-config [OPTIONS]

Options:
    --device-list FILE    Path to device_list.json (default: device_list.json)
    --axis-config FILE    Path to axis_config.json (default: axis_config.json)
    --output FILE         Path to save merged config (default: configured_devices.json)
    --validate-only       Validate inputs without saving output
    --verbose             Show detailed merge information

Example:
    # Discover devices and save device list
    python3 examples/save_load_device_list.py --output device_list.json

    # Create axis configuration (manually or using pyldcn-import-mctl)
    pyldcn-import-mctl Mctl_Logosol1.ini --output axis_config.json

    # Merge configurations
    pyldcn-merge-config --device-list device_list.json --axis-config axis_config.json --output configured_devices.json

Author: LinuxCNC Community
License: GPL v2 or later
"""

import sys
import argparse
from pyldcn.config import ConfigMerger, ConfigError, ConfigValidationError, ConfigMergeError


def main():
    """Main execution."""
    parser = argparse.ArgumentParser(
        description='Merge device list with axis configuration',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )

    parser.add_argument('--device-list', default='device_list.json',
                       help='Device list file (default: device_list.json)')
    parser.add_argument('--axis-config', default='axis_config.json',
                       help='Axis config file (default: axis_config.json)')
    parser.add_argument('--output', default='configured_devices.json',
                       help='Output file (default: configured_devices.json)')
    parser.add_argument('--validate-only', action='store_true',
                       help='Validate inputs without saving output')
    parser.add_argument('--verbose', action='store_true',
                       help='Show detailed merge information')

    args = parser.parse_args()

    print("="*70)
    print("LDCN Configuration Merge Utility")
    print("="*70)

    print(f"\nInputs:")
    print(f"  Device list:  {args.device_list}")
    print(f"  Axis config:  {args.axis_config}")
    print(f"  Output:       {args.output}")

    try:
        # Step 1: Load and validate inputs
        print("\n[Step 1] Load and Validate Inputs")
        print("-"*70)

        print(f"Loading device list from {args.device_list}...")
        print(f"Loading axis config from {args.axis_config}...")

        merger = ConfigMerger(args.device_list, args.axis_config)
        print("✓ Input files loaded and validated")

        # Step 2: Merge configurations
        print("\n[Step 2] Merge Configurations")
        print("-"*70)

        print("Merging device list with axis configuration...")
        merged_config = merger.merge()
        print("✓ Configuration merged successfully")

        # Show merge summary
        print(f"\nMerge summary:")
        print(f"  Total devices:     {merged_config['num_devices']}")
        print(f"  Configured axes:   {merged_config['num_configured_axes']}")
        print(f"  Port:              {merged_config['port']}")
        print(f"  Baud rate:         {merged_config['baud_rate']}")

        if args.verbose:
            print(f"\nConfigured axes:")
            for device in merged_config['devices']:
                if 'axis_name' in device:
                    print(f"  {device['axis_name']:3s} @ address {device['address']:2d}: "
                          f"{device['device_type']} (ID=0x{device['device_id']:02X})")

            print(f"\nUnconfigured devices:")
            for device in merged_config['devices']:
                if device.get('configured') == False:
                    print(f"  Address {device['address']:2d}: "
                          f"{device['device_type']} (ID=0x{device['device_id']:02X})")

        # Step 3: Save output (unless validate-only)
        if args.validate_only:
            print("\n[Step 3] Validation Complete")
            print("-"*70)
            print("✓ Validation successful (not saving output)")
        else:
            print("\n[Step 3] Save Merged Configuration")
            print("-"*70)

            print(f"Saving merged configuration to {args.output}...")
            merger.save(args.output)
            print(f"✓ Saved to {args.output}")

        # Success
        print("\n" + "="*70)
        print("SUCCESS")
        print("="*70)

        if not args.validate_only:
            print(f"\n✓ Merged configuration saved to {args.output}")
            print("\nNext steps:")
            print("  1. Review configured_devices.json")
            print("  2. Use in initialization script to apply configuration to hardware")
            print("  3. Test with servo initialization and motion commands")

    except ConfigError as e:
        print(f"\n✗ Configuration Error: {e}")
        sys.exit(1)
    except ConfigValidationError as e:
        print(f"\n✗ Validation Error: {e}")
        sys.exit(1)
    except ConfigMergeError as e:
        print(f"\n✗ Merge Error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n✗ Error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
