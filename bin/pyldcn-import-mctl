#!/usr/bin/env python3
"""
pyldcn-import-mctl - Import Axis Configuration from Mctl_*.ini

Converts legacy Mctl_*.ini format to axis_config.json format.

This utility parses MCTL INI files and extracts:
- Axis names and addresses
- Physical parameters (pitch, encoder resolution, gear ratios)
- PID tuning gains (KP, KD, KI, IL, OL, CL, EL, SR, DBC)
- Homing parameters (switch, velocities, distances)
- Limit switches (hard and soft limits)
- Motion parameters (velocity, acceleration, jerk)

Usage:
    pyldcn-import-mctl MCTL_FILE [OPTIONS]

Options:
    --output FILE         Path to save axis_config.json (default: axis_config.json)
    --validate-only       Validate conversion without saving
    --verbose             Show detailed conversion information

Example:
    pyldcn-import-mctl Mctl_Logosol1.ini --output axis_config.json --verbose

Author: LinuxCNC Community
License: GPL v2 or later
"""

import sys
import argparse
from pyldcn.config import MCTLImporter, AxisConfig, ConfigError, ConfigValidationError


def main():
    """Main execution."""
    parser = argparse.ArgumentParser(
        description='Import axis configuration from Mctl_*.ini',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )

    parser.add_argument('mctl_file',
                       help='Path to Mctl_*.ini file')
    parser.add_argument('--output', default='axis_config.json',
                       help='Output file (default: axis_config.json)')
    parser.add_argument('--validate-only', action='store_true',
                       help='Validate conversion without saving')
    parser.add_argument('--verbose', action='store_true',
                       help='Show detailed conversion information')

    args = parser.parse_args()

    print("="*70)
    print("LDCN MCTL Import Utility")
    print("="*70)

    print(f"\nInput:  {args.mctl_file}")
    print(f"Output: {args.output}")

    try:
        # Step 1: Load and parse MCTL file
        print("\n[Step 1] Load and Parse MCTL File")
        print("-"*70)

        print(f"Loading {args.mctl_file}...")
        importer = MCTLImporter(args.mctl_file)
        print("✓ MCTL file loaded")

        # Step 2: Convert to axis_config format
        print("\n[Step 2] Convert to Axis Config Format")
        print("-"*70)

        print("Converting MCTL format to axis_config.json...")
        axis_config = importer.convert()
        print("✓ Conversion successful")

        # Show conversion summary
        axes = axis_config.get_axes()
        print(f"\nConversion summary:")
        print(f"  Total axes: {len(axes)}")

        if args.verbose:
            print(f"\nAxis details:")
            for axis in axes:
                print(f"\n  {axis['name']} @ address {axis['address']}:")
                print(f"    Type:       {axis['axis_type']}")
                print(f"    Pitch:      {axis['pitch']} mm/rev")
                print(f"    Resolution: {axis['encoder_resolution']} counts/rev")
                print(f"    Gear ratio: {axis['gear_ratio'][0]}:{axis['gear_ratio'][1]}")
                print(f"    PID gains:  Kp={axis['gains']['kp']}, Kd={axis['gains']['kd']}, Ki={axis['gains']['ki']}")
                print(f"    Homing:     Switch {axis['homing']['home_switch']}, "
                      f"Start vel={axis['homing']['start_velocity']}")
                print(f"    Limits:     Soft [{axis['limits']['soft_limit_negative']['position']}, "
                      f"{axis['limits']['soft_limit_positive']['position']}]")
                print(f"    Max vel:    {axis['motion']['max_velocity']} mm/s")

        # Step 3: Save output (unless validate-only)
        if args.validate_only:
            print("\n[Step 3] Validation Complete")
            print("-"*70)
            print("✓ Validation successful (not saving output)")
        else:
            print("\n[Step 3] Save Axis Configuration")
            print("-"*70)

            print(f"Saving axis configuration to {args.output}...")
            importer.save(args.output)
            print(f"✓ Saved to {args.output}")

        # Success
        print("\n" + "="*70)
        print("SUCCESS")
        print("="*70)

        if not args.validate_only:
            print(f"\n✓ Axis configuration saved to {args.output}")
            print("\nNext steps:")
            print("  1. Review axis_config.json")
            print("  2. Run network discovery: examples/save_load_device_list.py")
            print("  3. Merge configs: pyldcn-merge-config")
            print("  4. Apply to hardware during initialization")

    except ConfigError as e:
        print(f"\n✗ Configuration Error: {e}")
        sys.exit(1)
    except ConfigValidationError as e:
        print(f"\n✗ Validation Error: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"\n✗ Error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
